// utils/pointsService.js

import { IconBarbell, IconBook, IconBrain, IconCrown, IconFlame, IconHammer, IconPlant, IconRocket, IconShieldCheck, IconTargetArrow } from "@tabler/icons-react";

export const EVENT_POINTS = {
  TIMEBLOCK_COMPLETE_CREDIT: 20, // ‚úÖ
  ALL_DAILY_COMPLETE_CREDIT: 100,
  VIOLATION_RESOLVED_CREDIT: 5, // ‚úÖ
  DIARY_WRITING_CREDIT: 5,
  RITUAL_CREATED_CREDIT: 5,
  RITUAL_COMPLETE_CREDIT: 10,
  URGE_LOGGED_CREDIT: 10,
  URGE_RESISTED_CREDIT: 50,
  MOOD_LOGGED_CREDIT: 5,
  MOOD_IMPROVEMENT_CREDIT: 5,
  NEW_STREAK_CREDIT: 50,
  EXTEND_STREAK_CREDIT: 10,

  RITUAL_MISS_PENALTY: -10,
  URGE_FAILURE_PENALTY: -100,
  BLOCK_MISS_PENALTY: -40, // ‚úÖ
  STREAK_BREAK_PENALTY: -100,
  VIOLATION_PENALTY: -60, // ‚úÖ
  TIMER_RESET_PENALTY: -800, // ‚úÖ
  PUNISHMENT_TRIGGER_PENALTY: -30,
  DEFAULT: 0,
};
export const RANK_TABLE = [
  {
    rankId: 0,
    name: "Novice",
    minPoints: 1,
    emoji: "üå±",
    icon: IconPlant,
    color: "bg-emerald-500/15 text-emerald-500 border border-emerald-500/30",
    
  },
  {
    rankId: 1,
    name: "Disciple",
    minPoints: 500,
    emoji: "üìò",
    icon: IconBook,
    color: "bg-sky-500/15 text-sky-500 border border-sky-500/30",
    
  },
  {
    rankId: 2,
    name: "Apprentice",
    minPoints: 900,
    emoji: "üõ†Ô∏è",
    icon: IconHammer,
    color: "bg-blue-500/15 text-blue-500 border border-blue-500/30",
    
  },
  {
    rankId: 3,
    name: "Focused Worker",
    minPoints: 1300,
    emoji: "üéØ",
    icon: IconTargetArrow,
    color: "bg-indigo-500/15 text-indigo-500 border border-indigo-500/30",
    
  },
  {
    rankId: 4,
    name: "Discipline Knight",
    minPoints: 2000,
    emoji: "üõ°Ô∏è",
    icon: IconShieldCheck,
    color: "bg-violet-500/15 text-violet-500 border border-violet-500/30",
    
  },
  {
    rankId: 5,
    name: "Self-Controller",
    minPoints: 3200,
    emoji: "üß†",
    icon: IconBrain,
    color: "bg-fuchsia-500/15 text-fuchsia-500 border border-fuchsia-500/30",
    
  },
  {
    rankId: 6,
    name: "Iron-Willed",
    minPoints: 5200,
    emoji: "üèãÔ∏è",
    icon: IconBarbell,
    color: "bg-amber-500/15 text-amber-600 border border-amber-500/30",
    
  },
  {
    rankId: 7,
    name: "Relentless",
    minPoints: 8200,
    emoji: "üî•",
    icon: IconFlame,
    color: "bg-orange-500/15 text-orange-500 border border-orange-500/30",
    
  },
  {
    rankId: 8,
    name: "Discipline Master",
    minPoints: 13000,
    emoji: "üëë",
    icon: IconCrown,
    color: "bg-rose-500/15 text-rose-500 border border-rose-500/30",
    
  },
  {
    rankId: 9,
    name: "Ascendant",
    minPoints: 20000,
    emoji: "üöÄ",
    icon: IconRocket,
    color: "bg-slate-900 text-slate-100 border border-slate-800 dark:bg-slate-100 dark:text-slate-900",
    
  },
];

export function getRankUtil(userAvailablePoints) {
  // Handle negatives ‚Üí stick to first rank
  if (userAvailablePoints < RANK_TABLE[0].minPoints) {
    return {
      currentRank: RANK_TABLE[0],
      nextRank: RANK_TABLE[1],
    };
  }

  for (let i = 0; i < RANK_TABLE.length; i++) {
    const rank = RANK_TABLE[i];
    const nextRank = RANK_TABLE[i + 1];

    if (!nextRank || userAvailablePoints < nextRank.minPoints) {
      // Either we‚Äôre at the last rank, or points fall before the next threshold

      return {
        currentRank: rank,
        nextRank: nextRank ?? rank, // if last rank, next = same
      };
    }
  }


  
  // Fallback (shouldn‚Äôt be hit)
  return {
    currentRank: RANK_TABLE[0],
    nextRank: RANK_TABLE[1],
  };
}


// getRankUtils(1 + 3)
// getRankUtils(500 + 3)
// getRankUtils(900 + 3)
// getRankUtils(1300 + 3)
// getRankUtils(2000 + 3)
// getRankUtils(3200 + 3)
// getRankUtils(5200 + 3)
// getRankUtils(8200 + 3)
// getRankUtils(13000 + 3)
// getRankUtils(20000 + 3)
// getRankUtils(1 - 10)
// getRankUtils(-3500)
// getRankUtils(-35000)
// getRankUtils(500 - 10)
// getRankUtils(900 - 10)
// getRankUtils(1300 - 10)
// getRankUtils(2000 - 10)
// getRankUtils(3200 - 10)
// getRankUtils(5200 - 10)
// getRankUtils(8200 - 10)
// getRankUtils(13000 - 10)
// getRankUtils(20000 - 10)
 

import PointsTxn from "../../backend/models/PointsTxn.model.js";
import User from "../../backend/models/User.model.js";

import api from "./api.js";
import { EVENT_POINTS } from "../utils/point.utils.js";

export async function applyPointsSrv(userId, eventKey) {
  const eventPoints = EVENT_POINTS;
  if (!eventPoints.hasOwnProperty(eventKey)) {
    throw new Error("Invalid event type");
  }

  const user = await User.findById(userId);
  if (!user) throw new Error("User not found");

  const currentPoints = user.points;
  const delta = eventPoints[eventKey];
  const finalPoints = currentPoints + delta;

  user.points = finalPoints;
  await user.save();

  await PointsTxn.create({
    uid: user._id,
    user: user.name,
    type: eventKey,
    points: delta, // change: this is the increment, not old balance
    balanceAfter: finalPoints,
  });

  console.log(`User=${user.name}, Before=${currentPoints}, Event=${eventKey}, Œî=${delta}, After=${finalPoints}`);

  return finalPoints;
}
export const applyPointsSrv_FE_Url = (eventKeyString) => api.post(`/users/points/apply`, { event: eventKeyString }, { withCredentials: true });
// export const applyPointsSrv  = async (uid, eventKeyString) => {
//   const eventPoints = {
//     TIMEBLOCK_COMPLETE_CREDIT: 20, // ‚úÖ
//     ALL_DAILY_COMPLETE_CREDIT: 100,
//     NEW_STREAK_CREDIT: 50,
//     EXTEND_STREAK_CREDIT: 10,
//     DIARY_WRITING_CREDIT: 5,
//     RITUAL_COMPLETE_CREDIT: 10,
//     URGE_LOGGED_CREDIT: 10,
//     URGE_RESISTED_CREDIT: 50,
//     MOOD_LOGGED_CREDIT: 5,
//     MOOD_IMPROVEMENT_CREDIT: 5,
//     RITUAL_MISS_PENALTY: -10,
//     URGE_FAILURE_PENALTY: -100,
//     BLOCK_MISS_PENALTY: -40, // ‚úÖ
//     STREAK_BREAK_PENALTY: -100,
//     VIOLATION_PENALTY: -50,
//     TIMER_RESET_PENALTY: -60,
//     PUNISHMENT_TRIGGER_PENALTY: -15,
//     DEFAULT: 0,
//   };

//   try {

//     if (!eventPoints.hasOwnProperty(eventKeyString)) {
//       return res.status(400).json({ error: "Invalid event type" });
//     }
//     const userRes = await User.findById(uid);
//     const currentPoints = userRes.points;
//     const finalPoints = currentPoints + eventPoints[eventKeyString];
//     const updatedUserPoints = await User.findByIdAndUpdate(
//       userRes._id,
//       {
//         points: finalPoints,
//       },
//       { new: true }
//     );
//     updatedUserPoints.save();
//     console.log(`User,CurrentPoints,EventKey,EventPoints,FinalPoints
// ${userRes.name},${currentPoints},${eventKey},${eventPoints[eventKey]},${finalPoints}`);
//     await PointsTxn.create({
//       uid: userRes._id,
//       type: eventKey,
//       points: currentPoints,
//       balanceAfter: finalPoints,
//     });
//     res.status(200).json({ points: updatedUserPoints.points });
//   } catch (err) {
//     res.status(400).json({ error: err.message });
//   }
// };

// TODO: merge these from user controller
// export const TestApplyPointsSrv  = async (req, res) => {
//   const eventArray = ["TIMEBLOCK_COMPLETE_CREDIT", "ALL_DAILY_COMPLETE_CREDIT", "NEW_STREAK_CREDIT", "EXTEND_STREAK_CREDIT", "DIARY_WRITING_CREDIT", "RITUAL_COMPLETE_CREDIT", "URGE_LOGGED_CREDIT", "URGE_RESISTED_CREDIT", "MOOD_LOGGED_CREDIT", "MOOD_IMPROVEMENT_CREDIT", "RITUAL_MISS_PENALTY", "URGE_FAILURE_PENALTY", "BLOCK_MISS_PENALTY", "STREAK_BREAK_PENALTY", "VIOLATION_PENALTY", "TIMER_RESET_PENALTY", "PUNISHMENT_TRIGGER_PENALTY", "DEFAULT"];

//   const eventPoints = {
//     TIMEBLOCK_COMPLETE_CREDIT: 20,
//     ALL_DAILY_COMPLETE_CREDIT: 100,
//     NEW_STREAK_CREDIT: 50,
//     VIOLATION_RESOLVED_CREDIT: 30,
//     EXTEND_STREAK_CREDIT: 10,
//     DIARY_WRITING_CREDIT: 5,
//     RITUAL_COMPLETE_CREDIT: 10,
//     URGE_LOGGED_CREDIT: 10,
//     URGE_RESISTED_CREDIT: 50,
//     MOOD_LOGGED_CREDIT: 5,
//     MOOD_IMPROVEMENT_CREDIT: 5,
//     RITUAL_MISS_PENALTY: -10,
//     URGE_FAILURE_PENALTY: -100,
//     BLOCK_MISS_PENALTY: -40,
//     STREAK_BREAK_PENALTY: -100,
//     VIOLATION_PENALTY: -50,
//     TIMER_RESET_PENALTY: -60,
//     PUNISHMENT_TRIGGER_PENALTY: -15,
//     DEFAULT: 0,
//   };
//   console.log("user,currentPoints,eventKey,eventPoints,finalPoint");

//   try {
//     const { entryLimit } = req.params;
//     const filePath = path.join(process.cwd(), `./backend/logs/${entryLimit}_points_test.csv`);
//     const writeStream = fs.createWriteStream(filePath, { flags: "w" });

//     // CSV header
//     writeStream.write("User,CurrentPoints,EventKey,EventPoints,FinalPoints\n");

//     for (let index = 0; index < entryLimit; index++) {
//       // const {userId}=uid
//       // console.log(uid);
//       const eventKey = eventArray[Math.floor(Math.random() * eventArray.length)];

//       const userRes = await User.findById(uid);
//       const currentPoints = userRes.points;
//       const finalPoints = currentPoints + eventPoints[eventKey];
//       const uupdatedUserPoints = await User.findByIdAndUpdate(userRes._id, {
//         points: finalPoints,
//       });
//       uupdatedUserPoints.save();
//       // console.log("user:", userRes.name, "currentPoints:", currentPoints, "| eventKey:", eventKey, "| eventPoints:", eventPoints[eventKey], "| finalPoint:", finalPoints);
//       writeStream.write(`${userRes.name},${currentPoints},${eventKey},${eventPoints[eventKey]},${finalPoints}\n`);
//       await PointsTxn.create({
//         uid: userRes._id,
//         type: eventKey,
//         points: currentPoints,
//         balanceAfter: finalPoints,
//       });
//     }
//     writeStream.end(); // close file
//     logger("info", "loop exit, CSV written");

//     res.status(200).json("OK");
//   } catch (err) {
//     logger("error", err.message);
//     res.status(400).json({ error: err.message });
//   }
// };

// export const getPointsLedgerSrv  = async (req, res) => {
//   try {
//     const entries = await PointsTxn.find({ uid: uid }).sort();
//     const totalEntries = await PointsTxn.countDocuments();
//     res.status(200).json({ totalEntries, entries });
//   } catch (err) {
//     res.status(400).json({ error: err.message });
//   }
// };
